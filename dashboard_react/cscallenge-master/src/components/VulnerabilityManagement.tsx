import React, { useState, useEffect } from 'react';
import { Search, Zap, RefreshCw, AlertTriangle } from 'lucide-react';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const VulnerabilityManagement: React.FC = () => {
  const [chartData, setChartData] = useState({
    labels: ['Critical', 'High', 'Medium', 'Low'],
    datasets: [
      {
        label: 'Open Vulnerabilities',
        data: [5, 12, 25, 35],
        backgroundColor: 'rgba(255, 99, 132, 0.6)',
        borderColor: 'rgba(255, 99, 132, 1)',
        borderWidth: 1,
      },
      {
        label: 'Patched Vulnerabilities',
        data: [3, 8, 20, 30],
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1,
      },
    ],
  });

  const [stats, setStats] = useState({
    totalScanned: 1234,
    criticalVulnerabilities: 5,
    avgPatchTime: 3.2,
    patchSuccessRate: 98.5,
  });

  useEffect(() => {
    const interval = setInterval(() => {
      const newOpenVulnerabilities = [
        Math.floor(Math.random() * 5) + 1,
        Math.floor(Math.random() * 10) + 5,
        Math.floor(Math.random() * 15) + 15,
        Math.floor(Math.random() * 20) + 25,
      ];
      const newPatchedVulnerabilities = [
        Math.floor(Math.random() * 3) + 1,
        Math.floor(Math.random() * 8) + 5,
        Math.floor(Math.random() * 15) + 10,
        Math.floor(Math.random() * 20) + 20,
      ];

      setChartData(prevState => ({
        ...prevState,
        datasets: [
          { ...prevState.datasets[0], data: newOpenVulnerabilities },
          { ...prevState.datasets[1], data: newPatchedVulnerabilities },
        ],
      }));

      setStats({
        totalScanned: Math.floor(Math.random() * 500) + 1000,
        criticalVulnerabilities: newOpenVulnerabilities[0],
        avgPatchTime: (Math.random() * 2 + 2).toFixed(1),
        patchSuccessRate: (Math.random() * 2 + 97).toFixed(1),
      });
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: 'Vulnerability Management Overview',
      },},
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true,
      },
    },
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-6">Vulnerability Management</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <Bar data={chartData} options={chartOptions} />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white p-4 rounded-lg shadow-md">
            <div className="flex items-center justify-between mb-2">
              <Search className="text-blue-500" size={24} />
              <span className="text-sm font-semibold text-gray-500">Total Scanned</span>
            </div>
            <p className="text-2xl font-bold">{stats.totalScanned}</p>
            <p className="text-sm text-gray-500">Assets this month</p>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-md">
            <div className="flex items-center justify-between mb-2">
              <AlertTriangle className="text-red-500" size={24} />
              <span className="text-sm font-semibold text-gray-500">Critical Vulnerabilities</span>
            </div>
            <p className="text-2xl font-bold">{stats.criticalVulnerabilities}</p>
            <p className="text-sm text-gray-500">Require immediate action</p>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-md">
            <div className="flex items-center justify-between mb-2">
              <Zap className="text-yellow-500" size={24} />
              <span className="text-sm font-semibold text-gray-500">Avg. Patch Time</span>
            </div>
            <p className="text-2xl font-bold">{stats.avgPatchTime}d</p>
            <p className="text-sm text-gray-500">For critical vulnerabilities</p>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-md">
            <div className="flex items-center justify-between mb-2">
              <RefreshCw className="text-green-500" size={24} />
              <span className="text-sm font-semibold text-gray-500">Patch Success Rate</span>
            </div>
            <p className="text-2xl font-bold">{stats.patchSuccessRate}%</p>
            <p className="text-sm text-gray-500">Last 30 days</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityManagement;